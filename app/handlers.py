import os
from dotenv import load_dotenv
import requests
import time
from io import BytesIO
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ContentType

router = Router()

VIRUSTOTAL_URL = "https://www.virustotal.com/api/v3"

# –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á
VIRUSTOTAL_API_KEY = os.getenv('VIRUSTOTAL_API_KEY')


def scan_url(url: str) -> str:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏."""
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}
    response = requests.post(
        f"{VIRUSTOTAL_URL}/urls", headers=headers, data={"url": url}
    )
    result = response.json()

    time.sleep(5)

    if response.status_code == 200:
        analysis_id = result["data"]["id"]
        analysis_response = requests.get(
            f"{VIRUSTOTAL_URL}/analyses/{analysis_id}", headers=headers
        )
        analysis_result = analysis_response.json()

        if analysis_response.status_code == 200:
            stats = analysis_result["data"]["attributes"]["stats"]

            return (
                (
                    f"‚úÖ <b>–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–∏ –æ–¥–∏–Ω –∏–∑ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤ –Ω–µ –ø–æ—Å—á–∏—Ç–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π</b>\n\n"
                )
                if stats["suspicious"] == 0 and stats["malicious"] == 0
                else (
                    f"‚ùóÔ∏è<b>–ù–µ –≤—Å–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã –ø–æ—Å—á–∏—Ç–∞–ª–∏ —Å—Å—ã–ª–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–π</b>\n\n"
                    f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ: {stats['harmless']}\n\n"
                    f"ü§î –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: {stats['suspicious']}\n\n"
                    f"‚õîÔ∏è –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ: {stats['malicious']}\n\n"
                )
            )

        else:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')} {response.status_code}"
    else:
        return f"ü§ñ <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Å—ã–ª–∫–∏, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏</b>"


def scan_file(file: BytesIO, file_name: str) -> str:
    """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
    headers = {"x-apikey": VIRUSTOTAL_API_KEY}
    files = {"file": (file_name, file)}
    response = requests.post(f"{VIRUSTOTAL_URL}/files", headers=headers, files=files)
    result = response.json()

    time.sleep(5)

    if response.status_code == 200:
        analysis_id = result["data"]["id"]
        analysis_response = requests.get(
            f"{VIRUSTOTAL_URL}/analyses/{analysis_id}", headers=headers
        )
        analysis_result = analysis_response.json()

        if analysis_response.status_code == 200:
            stats = analysis_result["data"]["attributes"]["stats"]

            return (
                (
                    f"‚úÖ <b>–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ, –Ω–∏ –æ–¥–∏–Ω –∏–∑ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–≤ –Ω–µ –ø–æ—Å—á–∏—Ç–∞–ª —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º</b>\n\n"
                )
                if stats["suspicious"] == 0 and stats["malicious"] == 0
                else (
                    f"‚ùóÔ∏è<b>–ù–µ –≤—Å–µ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å—ã –ø–æ—Å—á–∏—Ç–∞–ª–∏ —Ñ–∞–π–ª –±–µ–∑–æ–ø–∞—Å–Ω—ã–º</b>\n\n"
                    f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ: {stats['harmless']}\n\n"
                    f"ü§î –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ: {stats['suspicious']}\n\n"
                    f"‚õîÔ∏è –í—Ä–µ–¥–æ–Ω–æ—Å–Ω–æ: {stats['malicious']}\n\n"
                )
            )

        else:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')} {response.status_code}"
    else:
        return f"ü§ñ <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞</b>"


@router.message(CommandStart())
async def command_start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name}! "
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )


@router.message(F.text.regexp(r"(http[s]?://)?[^\s]+"))
async def handle_link(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏-—Å—Å—ã–ª–∫–∏."""
    link = message.text.strip()
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    link = link.replace("http://", "").replace("https://", "").replace("ftp://", "")
    result = scan_url(link)
    await message.answer(result, parse_mode="HTML")


@router.message(F.content_type == ContentType.DOCUMENT)
async def handle_document(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞."""
    document = message.document
    file_info = await message.bot.get_file(document.file_id)
    file = await message.bot.download_file(file_info.file_path)
    file_bytes = BytesIO(file.read())
    result = scan_file(file_bytes, document.file_name)
    await message.answer(result, parse_mode="HTML")
